package com.coreoz.wisp.schedule;

import java.time.Instant;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.temporal.ChronoUnit;

public class FixedHourSchedule implements Schedule {

	private final LocalTime executionTime;
	private final ZoneId zoneId;

	/**
	 * Parse time in the form of "hh:mm" or "hh:mm:ss"
	 */
	public FixedHourSchedule(String every) {
		this(LocalTime.parse(every));
	}

	/**
	 * Parse time in the form of "hh:mm" or "hh:mm:ss"
	 */
	public FixedHourSchedule(String every, ZoneId zoneId) {
		this(LocalTime.parse(every), zoneId);
	}

	public FixedHourSchedule(LocalTime every) {
		this(every, ZoneId.systemDefault());
	}

	public FixedHourSchedule(LocalTime every, ZoneId zoneId) {
		this.executionTime = every;
		this.zoneId = zoneId;
	}

	public LocalTime executionTime() {
		return executionTime;
	}

	public ZoneId zoneId() {
		return zoneId;
	}

	@Override
	public long nextExecutionInMillis(long currentTimeInMillis, int executionsCount, Long lastExecutionTimeInMillis) {
		return durationUntilNextExecutionInMillis(currentTimeInMillis, lastExecutionTimeInMillis)
				+ currentTimeInMillis;
	}

	long durationUntilNextExecutionInMillis(long currentTimeInMillis, Long lastExecutionTimeInMillis) {
		ZonedDateTime currentDateTime = Instant
				.ofEpochMilli(currentTimeInMillis)
				.atZone(zoneId);

		return currentDateTime
			.until(
				nextExecutionDateTime(
					currentDateTime,
					lastExecutionTimeInMillis != null && lastExecutionTimeInMillis == currentTimeInMillis
				),
				ChronoUnit.MILLIS
			);

	private ZonedDateTime nextExecutionDateTime(ZonedDateTime currentDateTime, boolean nextExecutionShouldBeNextDay) {
		if(!nextExecutionShouldBeNextDay && currentDateTime.toLocalTime().compareTo(executionTime) <= 0) {
			return executionTime.atDate(currentDateTime.toLocalDate()).atZone(zoneId);
		}
		return executionTime.atDate(currentDateTime.toLocalDate()).plusDays(1).atZone(zoneId);
	}

	@Override
	public String toString() {
		return "at " + executionTime + " " + zoneId;
	}
public class Scheduler {
    private BlockingQueue<Runnable> running = Queues.newArrayBlockingQueue(1000);
    private Executor executor = new ThreadPoolExecutor(50,100,10000, TimeUnit.MINUTES, running);

    private ScheduledExecutorService poller;
    private Set<String> executingIDs = Sets.newConcurrentHashSet();
    private Queue<ExecutableUnit> waiting = MinMaxPriorityQueue.maximumSize(1000).create();
    private Queue<ExecutableUnit> executing = MinMaxPriorityQueue.maximumSize(1000).create();
    private Queue<ExecutableUnit> succeeded = MinMaxPriorityQueue.maximumSize(1000).create();
    private Queue<ExecutableUnit> failed = MinMaxPriorityQueue.maximumSize(1000).create();

    public Scheduler(){
        poller = Executors.newScheduledThreadPool(10);
        poller.scheduleAtFixedRate(() -> {
            ExecutableUnit unit = waiting.poll();
            if(unit!=null){
                Optional<ZonedDateTime> next = unit.getTrigger().nextExecution();
                if(next.isPresent() && isNextSecond(next.get())){
                    //TODO verify date of last execution is not current
                    //TODO group executing add/remove into a method
                    //TODO create ExecutionInstance and manage status there
                    if(!executingIDs.contains(unit.getJob().getId())){
                        executing.add(unit);
                        executor.execute(unit.getJob());
                        executingIDs.add(unit.getJob().getId());
                    }
                }else{
                    if(next.isPresent()){
                        waiting.add(unit);
                    }
                }
            }
        }, 0, 10, TimeUnit.MILLISECONDS);
    }

    private boolean isNextSecond(ZonedDateTime next){
        return true;
    }

    public void schedule(ExecutableUnit executableUnit){
        executableUnit.getJob().addStatusHook(executionStatus -> {
            executing.remove(executableUnit);
            executingIDs.remove(executableUnit.getJob().getId());
            switch (executionStatus){
                case FAILURE:
                    failed.add(executableUnit);
                    break;
                case SUCCESS:
                    succeeded.add(executableUnit);
                    break;
            }
            if(executableUnit.getTrigger().nextExecution().isPresent()){
                waiting.add(executableUnit);
            }
            return null;
        });
        waiting.add(executableUnit);
    }
}
}